@using VeraCustomTriage.Shared
@using VeraCustomTriage.Shared.Models
@inject IGenericRepository<AutoResponse> responseRepo
@inject IJSRuntime jsRuntime

<div class="modal" tabindex="-1" role="dialog" id="taskModal">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">@CustomHeader</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">×</span>
                </button>
            </div>
            <div class="modal-body">
                <EditForm Model="@TaskObject" OnValidSubmit="@HandleValidSubmit">
                    <div class="form-group">
                        <input type="hidden" @bind-value="@TaskObject.Id" />
                        <label for="title">Title</label>
                        <InputText id="title" class="form-control" @bind-Value="@TaskObject.Title" />
                    </div>

                    <table class="table">
                        <thead>
                            <tr>
                                <th>Property</th>
                                <th></th>
                                <th>Value</th>
                                <th>Delete</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var condition in Conditions)
                            {
                                <tr>
                                    <td>@condition.Property</td>
                                    <td>contains</td>
                                    <td>@condition.Condition</td>
                                    <td><input type="button" class="btn btn-danger" @onclick="(() => Delete(condition))" value="-" /></td>
                                </tr>
                            }
                        </tbody>
                    </table>
                    <div class="form-group">
                        <label for="status">Condition</label>
                        <InputSelect id="property" class="form-control" @bind-Value="ConditionObject.Property">
                            <option value="">Select</option>
                            @foreach (var field in FlawFields)
                            {
                                <option value="@field">
                                    @field
                                </option>
                            }
                        </InputSelect>
                        <p>contains</p>
                        <InputText id="condition" class="form-control" @bind-Value="@ConditionObject.Condition" />
                        <button type="button" class="btn btn-primary" @onclick="(() => AddCondition())">+</button>
                    </div>
                    <label for="status">Auto Response</label>
                    <InputTextArea id="response" class="form-control" @bind-Value="@TaskObject.Response" />
                    <button type="submit" class="btn btn-primary">Save AutoResponse</button>
                    <button type="button" class="btn btn-secondary">Cancel</button>
                </EditForm>
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public AutoResponse TaskObject { get; set; }

    [Parameter]
    public Action DataChanged { get; set; }

    [Parameter]
    public RenderFragment CustomHeader { get; set; }

    PropertyCondition ConditionObject = new PropertyCondition();

    public string[] FlawFields = typeof(VeracodeService.Models.FlawType).GetFields().Select(x => x.Name).ToArray();

    public List<PropertyCondition> Conditions = new List<PropertyCondition>();

    protected override async Task OnInitializedAsync()
    {
        FlawFields = typeof(VeracodeService.Models.FlawType).GetProperties().Select(x => x.Name).ToArray();
    }

    private void AddCondition()
    {
        Conditions.Add(ConditionObject);
        ConditionObject = new PropertyCondition();
    }

    private async void HandleValidSubmit()
    {
        TaskObject.PropertyConditions = Conditions;
        if (TaskObject.Id == 0)
        {
            await responseRepo.Create(TaskObject);
        }
        else
        {
            await responseRepo.Update(TaskObject);
        }
        await CloseTaskModal();
        DataChanged?.Invoke();
    }

    private async Task CloseTaskModal()
    {
        await jsRuntime.InvokeAsync<object>("CloseModal", "taskModal");
    }

    private async Task Delete(PropertyCondition condition)
    {
        Conditions.Remove(condition);
    }

}